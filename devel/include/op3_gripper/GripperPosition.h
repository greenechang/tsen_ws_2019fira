// Generated by gencpp from file op3_gripper/GripperPosition.msg
// DO NOT EDIT!


#ifndef OP3_GRIPPER_MESSAGE_GRIPPERPOSITION_H
#define OP3_GRIPPER_MESSAGE_GRIPPERPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace op3_gripper
{
template <class ContainerAllocator>
struct GripperPosition_
{
  typedef GripperPosition_<ContainerAllocator> Type;

  GripperPosition_()
    : Left(0)
    , Right(0)  {
    }
  GripperPosition_(const ContainerAllocator& _alloc)
    : Left(0)
    , Right(0)  {
  (void)_alloc;
    }



   typedef int64_t _Left_type;
  _Left_type Left;

   typedef int64_t _Right_type;
  _Right_type Right;





  typedef boost::shared_ptr< ::op3_gripper::GripperPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::op3_gripper::GripperPosition_<ContainerAllocator> const> ConstPtr;

}; // struct GripperPosition_

typedef ::op3_gripper::GripperPosition_<std::allocator<void> > GripperPosition;

typedef boost::shared_ptr< ::op3_gripper::GripperPosition > GripperPositionPtr;
typedef boost::shared_ptr< ::op3_gripper::GripperPosition const> GripperPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::op3_gripper::GripperPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::op3_gripper::GripperPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace op3_gripper

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'op3_gripper': ['/home/robotis/Tsen_ws/src/op3_gripper/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::op3_gripper::GripperPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_gripper::GripperPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_gripper::GripperPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_gripper::GripperPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_gripper::GripperPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_gripper::GripperPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::op3_gripper::GripperPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b0e67f9a5c183da3139b32cb4f14d70";
  }

  static const char* value(const ::op3_gripper::GripperPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b0e67f9a5c183daULL;
  static const uint64_t static_value2 = 0x3139b32cb4f14d70ULL;
};

template<class ContainerAllocator>
struct DataType< ::op3_gripper::GripperPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "op3_gripper/GripperPosition";
  }

  static const char* value(const ::op3_gripper::GripperPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::op3_gripper::GripperPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 Left\n\
int64 Right\n\
";
  }

  static const char* value(const ::op3_gripper::GripperPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::op3_gripper::GripperPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Left);
      stream.next(m.Right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::op3_gripper::GripperPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::op3_gripper::GripperPosition_<ContainerAllocator>& v)
  {
    s << indent << "Left: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Left);
    s << indent << "Right: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OP3_GRIPPER_MESSAGE_GRIPPERPOSITION_H
